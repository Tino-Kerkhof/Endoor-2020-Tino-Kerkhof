using System;
using System.ComponentModel;

namespace FractionCalculator
{
    class FractionCalculator
    {
        static void Main(string[] args)
        {
            
        }
    }

    class Fraction
    {
        int numerator;
        int denominator;

        Fraction(int numerator, int denominator)
        {
            if (denominator == 0)
            {
                throw new ArgumentException(string.Format("You cannot devide by zero."), "denominator");
            }

            if (denominator < 0)
            {
                this.numerator = 0 - numerator;
                this.denominator = 0 - denominator;
            }
            else
            {
                this.numerator = numerator;
                this.denominator = denominator;
            }
        }
        Fraction(int numerator) : this(numerator, 1) { }
        Fraction() : this(0, 1) { }

        public int GetNumerator() { return this.numerator; }
        public int GetDenominator() { return this.denominator; }

#pragma warning disable CS0114 // Member hides inherited member; missing override keyword
        public string ToString()
#pragma warning restore CS0114 // Member hides inherited member; missing override keyword
        {
            if (this.denominator == 1) { return this.numerator.ToString(); }
            else { return this.numerator.ToString() + "/" + this.denominator.ToString(); }
        }

        public double ToDouble() { return (double)this.numerator / (double)this.denominator; }

        public Fraction Add(Fraction other)
        {
            int numerator = this.numerator * other.denominator + other.numerator * this.denominator;
            int denominator = this.denominator * other.denominator;
            return new Fraction(numerator, denominator);
        }

        public Fraction Subtract(Fraction other)
        {
            int numerator = this.numerator * other.denominator - other.numerator * this.denominator;
            int denominator = this.denominator * other.denominator;
            return new Fraction(numerator, denominator);
        }

        public Fraction Multiply(Fraction other)
        {
            int numerator = this.numerator * other.numerator;
            int denominator = this.denominator * other.denominator;
            return new Fraction(numerator, denominator);
        }

        public Fraction Devide(Fraction other)
        {
            if (other.numerator == 0)
            {
                throw new ArgumentException(string.Format("You cannot devide by zero."), "other.nominator");
            }
            int numerator = this.numerator * other.denominator;
            int denominator = this.denominator * other.numerator;
            return new Fraction(numerator, denominator);
        }

        public bool Equals(Fraction other)
        {
            return (this.ToLowerTerms().numerator == other.ToLowerTerms().numerator &&
                this.ToLowerTerms().denominator == other.ToLowerTerms().denominator);
        }

        public Fraction ToLowerTerms()
        {
            int a = this.numerator;
            int b = this.denominator;
            int gcd;

            if (this.numerator < 0) { a *= -1; }
            do
            {
                gcd = Gcd(a, b);
                a /= gcd;
                b /= gcd;
            } while (gcd != 1);

            if (this.numerator < 0) { a *= -1; }
            return new Fraction(a, b);
        }
        private static int Gcd(int a, int b)
        {
            int mod;
            while (a != 0 && b != 0)
            {
                mod = a % b;
                a = b;
                b = mod;
            }
            return a;
        }
    }
}
